{"version":3,"sources":["webpack:///./script/task-1.js","webpack:///./script/task-2.js","webpack:///./script/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","canProcess","reject","id","logError","warn","logSuccess","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACAC,EAAOJ,KACfA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAEnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE/D,OAAO,IAAIhB,SAAQ,SAAAC,GACjBA,EAAQa,OAINX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAE7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GClBnC,IAIMe,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCvB,GAL2BsB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAK9CK,EAAaH,KAAKE,SAAW,GACnC,OAAO,IAAIxB,SAAQ,SAACC,EAASyB,GAC3BxB,YAAW,WACT,OAAIuB,EACKxB,EAAQ,CAAE0B,GAAIR,EAAYQ,GAAIvB,KAAMN,IAEtC4B,EAAOP,EAAYQ,MACzB7B,OAID8B,EAAW,SAAAD,GACf,OAAOtB,QAAQwB,KAAR,gCAC2BF,EAD3B,8BAIHG,EAAa,SAAC,GAAiB,IAAfH,EAAe,EAAfA,GAAIvB,EAAW,EAAXA,KACxB,OAAOC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAETc,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKuB,GAAYE,MAAMJ,GAEhEV,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKuB,GAAYE,MAAMJ,GAEhEV,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAAMxB,KAAKuB,GAAYE,MAAMJ,GAE/DV,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKuB,GAAYE,MAAMJ,K","file":"main.494100e7320f6a871f0d.js","sourcesContent":["const delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve, logger(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n  return new Promise(resolve => {\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  const canProcess = Math.random() > 0.3;\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        return resolve({ id: transaction.id, time: delay });\r\n      }\r\n      return reject(transaction.id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logError = id => {\r\n  return console.warn(\r\n    `Error processing transaction ${id}. Please try again later.`,\r\n  );\r\n};\r\nconst logSuccess = ({ id, time }) => {\r\n  return console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}